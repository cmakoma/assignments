// Assignement 1410Gps
// Program Gps
// Author Christian Makoma
// Created Nov 24, 2019


package gps;

import java.util.ArrayList;

public class Gps {
	private ArrayList<GpsPosition> route;

	public Gps(GpsPosition route) {
        this.route = new ArrayList<>();
        this.route.add(route);
    }
	
	public ArrayList<GpsPosition> getRoute() {
		return route;
	}

	public void update(GpsPosition position) {
		
		route.add(position);
	}

	public void randomUpdate() {
		
//		Random rand = new Random();
//		GpsPosition randPosition = new GpsPosition(
//				
//				route.get(route.size()-1).getLatitude() + rand.nextDouble()-.5,
//                route.get(route.size()-1).getLongitude() + rand.nextDouble()-.5,
//                route.get(route.size()-1).getElevation());
//		
//		route.add(randPosition);
	}
	
	
	/**
	 * 
	 * @return GpsPosition current position 
	 */
	public GpsPosition position() {
		return route.get(route.size()-1);
	}
	
	/**
	 * 
	 * @return sum of all distances traveled between positions that are listed on the route.
	 */
	public Double distanceTraveled() {
		double totalDistance = 0;
		
		for (int i = 1; i < route.size(); i++){
			
			totalDistance += distance(route.get(i-1), route.get(i));
		}
		return totalDistance;
	}
	
	/**
	 * distance calculates the distance between two locations
	 * @param from first gps position
	 * @param to second gps position
	 * @return gives the distance between two points (from - to)
	 */
	private Double distance(GpsPosition from, GpsPosition to) {
		
		final int R = 6371; // radius of the earth
        double longDist = Math.toRadians(to.getLongitude() - from.getLongitude());
        double latDist = Math.toRadians(to.getLatitude() - from.getLatitude());
        double a = Math.pow(Math.sin(latDist / 2), 2)
                + Math.cos(Math.toRadians(from.getLatitude())) * Math.cos(Math.toRadians(to.getLatitude()))
                * Math.pow(Math.sin(longDist /2), 2);
        double distance = R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        // elevation is in meters so we need to divide by 1000 to convert to Kilometers
        double height = (from.getElevation() - to.getElevation()) / 1000;

        return Math.sqrt(Math.pow(distance, 2) + Math.pow(height, 2));
		
		
	}
	
	
	/**
	 * reset clears the route and resets gps position to the last position it was at
	 */
	public void reset() {
		GpsPosition position = route.get(route.size()-1);
		
		route.clear();
		
		route.add(position);
	}
	
	 public static void main(String[] args){
	        Result result = JUnitCore.runClasses(GpsPositionTest.class, GpsTest.class);

	        for (Failure failure : result.getFailures()) {
	            System.out.printf("Failed test: %s%n", failure.toString());
	        }

	        System.out.printf("Number of tests run: %d%n", result.getRunCount());
	        System.out.printf("Successful: %d%n", result.getRunCount() - result.getFailureCount());
	        System.out.printf("Failed: %d%n", result.getFailureCount());
	    }
	
}
